name: Terraform Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Enter Environment Name"
        required: true
        type: choice
        options:
          - dev
          - qa
      command:
        description: "Select Terraform Command"
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  # Secrets
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  # Vars
  AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
  AZURE_PROJECT_NAME: ${{ vars.AZURE_PROJECT_NAME }}
  AZURE_SERVICE_RESOURCE_GROUP_NAME: ${{ vars.AZURE_SERVICE_RESOURCE_GROUP_NAME }}
  AZURE_SERVICE_STORAGE_ACCOUNT_NAME: ${{ vars.AZURE_SERVICE_STORAGE_ACCOUNT_NAME }}
  AZURE_SERVICE_STORAGE_CONTAINER_NAME: "${{ vars.AZURE_SERVICE_STORAGE_CONTAINER_NAME }}"
  # Dynamic vars
  AZURE_ENVIRONMENT: ${{ inputs.environment }}
  AZURE_TERRAFORM_STATE_KEY: "${{ inputs.environment }}.${{ vars.AZURE_TERRAFORM_STATE_NAME }}"

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI Login
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Print Environment Variable
        run: |
          echo "Deploying to environment: $AZURE_ENVIRONMENT"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: latest

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ vars.AZURE_SERVICE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.AZURE_SERVICE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ env.AZURE_SERVICE_STORAGE_CONTAINER_NAME }}" \
            -backend-config="key=${{ env.AZURE_TERRAFORM_STATE_KEY }}"

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        if: ${{ inputs.command == 'plan' || inputs.command == 'apply' }}
        working-directory: terraform
        run: |
          terraform plan \
            -var="project_name=${{ vars.AZURE_PROJECT_NAME }}" \
            -var="environment=${{ inputs.environment }}" \
            -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"

      - name: Terraform Apply
        if: ${{ inputs.command == 'apply' }}
        working-directory: terraform
        run: |
          terraform apply -auto-approve \
            -var="project_name=${{ vars.AZURE_PROJECT_NAME }}" \
            -var="environment=${{ inputs.environment }}" \
            -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"

      - name: Terraform Destroy
        if: ${{ inputs.command == 'destroy' }}
        working-directory: terraform
        run: |
          terraform destroy -auto-approve \
            -var="project_name=${{ vars.AZURE_PROJECT_NAME }}" \
            -var="environment=${{ inputs.environment }}" \
            -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"
